@page "/pet/edit/{id:long}"
@inject IPetsData PetsData
@inject NavigationManager _navManager
@inject ISnackbar Snackbar
@inject IUserData UserData
@inject IHttpContextAccessor httpContextAccessor;

@if (_user is not null && _user.role.ToLower().Equals("admin"))
{
    <PetForm @ref="petForm" OnSubmit="HandleValidSubmit" currentPet="currentPet" />    
}
else
{
    <MudText Typo="Typo.h4">You are not authorized to view this page.</MudText>
}


@code {

    [Parameter]
    public long id { get; set; } = 1;

    PetForm petForm;

    Pets currentPet;

    private User? _user;
    
    private async void HandleValidSubmit(Pets pet)
    {
        pet.id = currentPet.id;
        var res = await PetsData.UpdatePet(pet);
        if (res)
        {
            Snackbar.Add($"Pet {pet.id} updated!", Severity.Success);
            _navManager.NavigateTo("/pet/admin/show/" + id);
        }
        else
        {
            Snackbar.Add($"Pet {pet.id} failed to update!", Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        currentPet = await PetsData.GetPet(id);
        var email = "";
        if (httpContextAccessor.HttpContext != null)
        {
            email = httpContextAccessor.HttpContext.Request.Headers["X-Forwarded-Email"].ToString() ?? "";
        }
        if (email.Length > 0)
        {
            _user = await UserData.CheckForUser(UserData, email);
        }
    }

}
